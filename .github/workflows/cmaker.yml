# This workflow builds and tests a CMake project on multiple platforms using different compilers.
name: CMaker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure all matrix configurations complete, providing full feedback.
      fail-fast: false

      # Define matrix combinations for different OS, build types, and compilers.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
            mingw: true
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            mingw: false
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            mingw: false

    steps:
    # Step 1: Check out the code
    - uses: actions/checkout@v4

    # Step 2: Install dependencies (for MinGW on Windows)
    - name: Install MinGW (Windows only)
      if: matrix.os == 'windows-latest' && matrix.mingw == true
      run: |
        choco install mingw -y
        echo "::add-path::C:\\tools\\mingw64\\bin"

    # Step 3: Set reusable strings
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # Step 4: Configure CMake
    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    # Step 5: Build the project
    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # Step 6: Run tests
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    # Step 7: Optional - Upload build artifacts (if needed)
    - name: Upload Build Artifacts
      if: always()  # Ensure artifacts are uploaded even if tests fail.
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: ${{ steps.strings.outputs.build-output-dir }}
